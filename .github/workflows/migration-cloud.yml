name: migartion-cloud
on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]


jobs:
  terraform-actions:
    runs-on:  ubuntu-latest
    permissions: 
      packages: write
      contents: read
      id-token: write
      pull-requests: write
    
    strategy:
      matrix:
        directory: [cloud, migrated-webserver, rds, vpcpeer]
    defaults:
        run:
          working-directory: ${{matrix.directory}}
    steps:
      - name: Clone our repository
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'
      
      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::722257929281:role/github-actions-iodc
          aws-region: eu-west-1
          role-session-name: GithubmigratiocloudnDeploy
      
      - name: Terraform Set up
        uses: hashicorp/setup-terraform@v1

      - name:  Terraform initialization
        run:  terraform init 

      - name:  Terraform validation
        run:  terraform validate

      - name: Terraform readme
        id: fmt
        run:  terraform fmt

      # - name: Render terraform docs 
      #   if: github.event_name == 'pull_request'
      #   uses: terraform-docs/gh-actions@v1.0.0
      #   with:
      #     working-dir: cloud
      #     output-file: ../README.md
      #     output-method: inject
      #     git-push: "true" 

      - name: Terraform Plan all
        id: plan_all
        #run:  TF_LOG=debug terraform plan
        run: terraform plan -no-color 
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \'${{ matrix.directory }}\', Workflow: \`${{ github.workflow }}\`*`;
            github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
            })
            
      - name: Terraform applying
        if: github.event_name != 'pull_request'
        run:  terraform apply -auto-approve

  terraform-actions1:
    runs-on:  ubuntu-latest
    permissions: 
      packages: write
      contents: read
      id-token: write
      pull-requests: write
    defaults:
        run:
          working-directory: secrets
    steps:
      - name: Clone our repository
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'
      
      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::722257929281:role/github-actions-iodc
          aws-region: eu-west-1
          role-session-name: GithubmigratiocloudnDeploy
      
      - name: Terraform Set up
        uses: hashicorp/setup-terraform@v1

      - name:  Terraform initialization
        run:  terraform init 

      - name:  Terraform validation
        run:  terraform validate

      - name: Terraform readme
        id: fmt
        run:  terraform fmt    
      
      - name: Terraform Plan secrets
        id: plan
        run: terraform plan -var="pass=${{ secrets.RDS_PASS }}" -var="address=${{ secrets.MY_ADD }}"
        continue-on-error: true
      
      - name: Terraform applying
        if: github.event_name != 'pull_request'
        run:  terraform apply -auto-approve -var="pass=${{ secrets.RDS_PASS }}" -var="address=${{ secrets.MY_ADD }}"
          
  infracost-deploy:
    runs-on:  ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        directory: [cloud, migrated-webserver, rds, secrets, vpcpeer]
    env:
      TF_ROOT: ${{ matrix.directory }}
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=${TF_ROOT} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v3
        

      - name: Generate Infracost diff
        run: |
          infracost diff --path=${TF_ROOT} \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json
      
      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{github.token}} \
                                     --pull-request=${{github.event.pull_request.number}} \
                                     --behavior=new
  checkov-check:
    runs-on:  ubuntu-latest
    permissions:
      contents: write
      security-events: write
      actions: read
    strategy:
      matrix:
        directory: [cloud, migrated-webserver, rds, secrets, vpcpeer]
    defaults:
      run:
        working-directory: ${{ matrix.directory }}
    steps:
      - name: Checkov
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ matrix.directory }}
          framework: terraform
          soft_fail: true
          download_external_modules: true
          quiet: true
          output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          output_file_path: results.sarif
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: results.sarif
  
  tflint-check:
    runs-on:  ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    steps:      
      - name: Setup TFLint 
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest
      
      - name: Init TFLint
        run: tflint --init
        env:       
          GITHUB_TOKEN: ${{ github.token }}
      
      - name: Run the Action
        run: tflint -f compact
